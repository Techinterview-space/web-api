version: "3.4"

networks:
  interviewer-network:
    driver: bridge

services:

  api:
    container_name: interviewer-api
    image: {api}
    restart: always
    depends_on:
      - kafka
      - elasticsearch
    environment:
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
    ports:
      - 5001:5001
    networks:
      - interviewer-network
    volumes:
      - ~/.aspnet/https:/https:ro

  elasticsearch:
    container_name: interviewer-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - 9200:9200
    networks:
      - interviewer-network

  zookeeper:
    container_name: interviewer-zookeeper
    restart: always
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - interviewer-network

  # https://www.kaaproject.org/blog/kafka-docker
  kafka:
    container_name: interviewer-kafka
    image: wurstmeister/kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "user-change-queue:1:1,healthcheck-topic:1:1,user-login-queue:1:1,email-send-queue:1:1"
    networks:
      - interviewer-network

  kibana:
    container_name: interviewer-kibana
    image: docker.elastic.co/kibana/kibana:7.5.2
    environment:
      SERVER_NAME: kibana.local
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    networks:
      - interviewer-network

  localstack:
    container_name: interviewer-localstack
    image: localstack/localstack
    restart: always
    ports:
      - 4510-4559:4510-4559
      - 4566:4566
      - 4571:4571
    environment:
      - SERVICES=s3,dynamodb
      # - DEBUG=${DEBUG-}
      # - DATA_DIR=${DATA_DIR-}
      # - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-}
      - HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "${TMPDIR:-/tmp}/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./.aws:/docker-entrypoint-initaws.d
    networks:
      - interviewer-network

volumes:
  elasticsearch-data:
