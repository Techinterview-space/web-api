name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   env:
  #     solution-file: ./src/Petrel.Taxer.sln
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Backend build and test
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: "6.0.x"
  #     - name: Install dependencies
  #       run: dotnet restore ${{env.solution-file}}
  #     - name: Test
  #       run: dotnet test ${{env.solution-file}} --no-restore --verbosity normal
  build:
    # needs: tests
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      DO_TOKEN: ${{ secrets.DO_TOKEN }}
      PRODUCTION_SETTINGS_FILE: ./src/Web.Api/appsettings.Production.json
    container:
      image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker build and push
        run: |
          echo ${{env.PRODUCTION_SETTINGS_FILE}}
          sed -i 's/"__AUTH0_AUDIENCE",/"${{ vars.AUTH0_AUDIENCE }}",/g' ${{env.PRODUCTION_SETTINGS_FILE}}
          sed -i 's/"__DATABASE_CONNECTION_STRING",/"${{ vars.DATABASE_CONNECTION_STRING }}",/g' ${{env.PRODUCTION_SETTINGS_FILE}}
          sed -i 's/"__S3_ACCESS_KEY",/"${{ vars.S3_ACCESS_KEY }}",/g' ${{env.PRODUCTION_SETTINGS_FILE}}
          sed -i 's/"__S3_ACCESS_SECRET",/"${{ vars.S3_ACCESS_SECRET }}",/g' ${{env.PRODUCTION_SETTINGS_FILE}}
          sed -i 's/"__S3_BUCKET_NAME",/"${{ vars.S3_BUCKET_NAME }}",/g' ${{env.PRODUCTION_SETTINGS_FILE}}
          sed -i 's/"__SENDGRID_API_KEY",/"${{ vars.SENDGRID_API_KEY }}",/g' ${{env.PRODUCTION_SETTINGS_FILE}}
          cd src
          docker login -u ${{ env.DO_TOKEN }} -p ${{ env.DO_TOKEN }} registry.digitalocean.com/techinterview
          docker build -f Dockerfile -t ${{ secrets.CR }}/backend:${{ github.sha }} .
          docker push ${{ secrets.CR }}/backend:${{ github.sha }}
  deploy-ssh:
    if: github.event_name == 'push'
    container:
      image: docker:stable
    env:
      DO_TOKEN: ${{ secrets.DO_TOKEN }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Deploy ssh
        run: |
          sed -i "s,{api},${{ secrets.CR }}/backend:${{ github.sha }},g" docker-compose.deploy.yml
      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.IP }}
          username: devops
          key: ${{ secrets.SSH_KEY_PRIVATE }}
          port: ${{ secrets.PORT }}
          source: "docker-compose.deploy.yml"
          target: "/home/devops/deploy"
      - name: Execute commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.IP }}
          username: devops
          key: ${{ secrets.SSH_KEY_PRIVATE }}
          port: ${{ secrets.PORT }}
          script_stop: true
          script: |
            cd ~/deploy
            docker login -u ${{ env.DO_TOKEN }} -p ${{ env.DO_TOKEN }} registry.digitalocean.com/techinterview
            docker-compose -f docker-compose.deploy.yml pull
            docker-compose -f docker-compose.deploy.yml up -d
