stages:
    - backend test
  - frontend test
  - build
  - deploy
  - sonar-analyse

backend test:
    stage: backend test
    image: mcr.microsoft.com/dotnet/sdk:6.0
    variables:
        GIT_SUBMODULE_STRATEGY: recursive

    only:
        - merge_requests
    cache:
        key: "build_dependency_dotnet"
        paths:
            - nuget/
    before_script:
        - git submodule update --init
    - cd src
    script:
        - dotnet restore
    - dotnet build --configuration Release
    - dotnet test

        # TODO Maxim: remove copypaste
# Build steps
frontend test:
    stage: frontend test
    image: node:17
    cache:
        key: "build_dependency_node"
        paths:
            - src/Frontend/node_modules/
    only:
        - merge_requests
    script:
        # install dependencies to use chrome w/ puppeteer
    - apt update
    - apt install -y libgbm-dev
    - apt install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libnss3 lsb-release xdg-utils
    #- apt install -y libappindicator1 libindicator7
    - cd ./src/Frontend/
    - npm set progress=false
    - npm install --no-optional
    - npm run lint
    - npm run build
    - npm run test-headless-ci-only

build containers api:
    image: docker:stable
    tags:
        - intranet
    stage: build
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip_build/
    only:
        - qa
    variables:
        # DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        CONTAINER_RELEASE_PETREL_CORE_API_IMAGE: registry.gitlab.com/petrel-ai/petrel-intranet/petrel.intranet/api
        GIT_SUBMODULE_STRATEGY: recursive

    services:
        - docker:dind

    before_script:
        - env
    - docker version
    - docker info
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN registry.gitlab.com
    - sed -i "s,{DATABASE_HOST},${DATABASE_HOST},g;s,{DATABASE_PORT},${DATABASE_PORT},g;s,{DATABASE_STAGING},${DATABASE_STAGING},g;s,{DATABASE_PROD},${DATABASE_PROD},g;s,{DATABASE_USER},${DATABASE_USER},g;s,{DATABASE_PASS},${DATABASE_PASS},g;s,{ELASTIC_HOST},${ELASTIC_HOST},g;s,{ELASTIC_PASS},${ELASTIC_PASS},g;s,{S3_ACCESS_KEY},${S3_ACCESS_KEY},g;s,{S3_ACCESS_SECRET},${S3_ACCESS_SECRET},g" src/Web.Api/appsettings*.json
    - cd src

    script:
        - docker build -t ${API_IMAGE}:$CI_COMMIT_SHORT_SHA -t ${API_IMAGE}:latest  .
    - docker push ${API_IMAGE}

build containers api prod:
    image: docker:stable
    tags:
        - intranet
    stage: build
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip_build/
    only:
        - master
    variables:
        #DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        CONTAINER_RELEASE_PETREL_CORE_API_IMAGE: registry.gitlab.com/petrel-ai/petrel-intranet/petrel.intranet/api
        GIT_SUBMODULE_STRATEGY: recursive

    services:
        - docker:dind

    before_script:
        - env
    - docker version
    - docker info
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN registry.gitlab.com
    - sed -i "s,{DATABASE_HOST},${DATABASE_HOST},g;s,{DATABASE_PORT},${DATABASE_PORT},g;s,{DATABASE_STAGING},${DATABASE_STAGING},g;s,{DATABASE_PROD},${DATABASE_PROD},g;s,{DATABASE_USER},${DATABASE_USER},g;s,{DATABASE_PASS},${DATABASE_PASS},g;s,{ELASTIC_HOST},${ELASTIC_HOST},g;s,{ELASTIC_PASS},${ELASTIC_PASS},g;s,{S3_ACCESS_KEY},${S3_ACCESS_KEY},g;s,{S3_ACCESS_SECRET},${S3_ACCESS_SECRET},g" src/Web.Api/appsettings*.json
    - cd src

    script:
        - docker build -t ${API_IMAGE_PROD}:$CI_COMMIT_SHORT_SHA -t ${API_IMAGE_PROD}:latest  .
    - docker push ${API_IMAGE_PROD}

build containers identity:
    image: docker:stable
    tags:
        - intranet
    stage: build
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip_build/
    only:
        - qa
    variables:
        #DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        CONTAINER_RELEASE_PETREL_IDENTITY_SERVER_IMAGE: registry.gitlab.com/petrel-ai/petrel-intranet/petrel.intranet/identity
        GIT_SUBMODULE_STRATEGY: recursive
    services:
        - docker:dind

    before_script:
        - env
    - docker version
    - docker info
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN registry.gitlab.com
    - sed -i "s,{DATABASE_HOST},${DATABASE_HOST},g;s,{DATABASE_PORT},${DATABASE_PORT},g;s,{DATABASE_STAGING},${DATABASE_STAGING},g;s,{DATABASE_PROD},${DATABASE_PROD},g;s,{DATABASE_USER},${DATABASE_USER},g;s,{DATABASE_PASS},${DATABASE_PASS},g;s,{GOOGLE_CLIENT_ID},${GOOGLE_CLIENT_ID},g;s,{GOOGLE_CLIENT_SECRET},${GOOGLE_CLIENT_SECRET},g;s,{ELASTIC_HOST},${ELASTIC_HOST},g;s,{ELASTIC_PASS},${ELASTIC_PASS},g;s,{S3_ACCESS_KEY},${S3_ACCESS_KEY},g;s,{S3_ACCESS_SECRET},${S3_ACCESS_SECRET},g" src/SSO/appsettings*.json
    - cd src

    script:
        - docker build -f Dockerfile_Identity -t ${IDENTITY_IMAGE}:$CI_COMMIT_SHORT_SHA -t ${IDENTITY_IMAGE}:lastest .
    - docker push ${IDENTITY_IMAGE}

build containers identity prod:
    image: docker:stable
    tags:
        - intranet
    stage: build
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip_build/
    only:
        - master
    variables:
        # DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        CONTAINER_RELEASE_PETREL_IDENTITY_SERVER_IMAGE: registry.gitlab.com/petrel-ai/petrel-intranet/petrel.intranet/identity
        GIT_SUBMODULE_STRATEGY: recursive
    services:
        - docker:dind

    before_script:
        - env
    - docker version
    - docker info
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN registry.gitlab.com
    - sed -i "s,{DATABASE_HOST},${DATABASE_HOST},g;s,{DATABASE_PORT},${DATABASE_PORT},g;s,{DATABASE_STAGING},${DATABASE_STAGING},g;s,{DATABASE_PROD},${DATABASE_PROD},g;s,{DATABASE_USER},${DATABASE_USER},g;s,{DATABASE_PASS},${DATABASE_PASS},g;s,{GOOGLE_CLIENT_ID},${GOOGLE_CLIENT_ID},g;s,{GOOGLE_CLIENT_SECRET},${GOOGLE_CLIENT_SECRET},g;s,{ELASTIC_HOST},${ELASTIC_HOST},g;s,{ELASTIC_PASS},${ELASTIC_PASS},g" src/SSO/appsettings*.json
    - cd src

    script:
        - docker build -f Dockerfile_Identity -t ${IDENTITY_IMAGE_PROD}:$CI_COMMIT_SHORT_SHA -t ${IDENTITY_IMAGE_PROD}:lastest .
    - docker push ${IDENTITY_IMAGE_PROD}

build containers for stage front:
    image: docker:stable
    tags:
        - intranet
    stage: build
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip_build/
    only:
        - qa
    variables:
        # DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        CONTAINER_RELEASE_PETREL_FRONTEND_IMAGE: registry.gitlab.com/petrel-ai/petrel-intranet/petrel.intranet/frontend
    services:
        - docker:dind

    before_script:
        - env
    - docker version
    - docker info
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN registry.gitlab.com
    - cd src

    script:
        - docker build -f Dockerfile_Frontend -t ${FRONTEND_IMAGE}:$CI_COMMIT_SHORT_SHA -t ${FRONTEND_IMAGE}:latest .
    - docker push ${FRONTEND_IMAGE}

    after_script:
        - docker logout registry.gitlab.com

build containers for prod front:
    image: docker:stable
    tags:
        - intranet
    stage: build
    except:
        variables:
            - $CI_COMMIT_MESSAGE =~ /skip_build/
    only:
        - master
    variables:
        # DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        CONTAINER_RELEASE_PETREL_FRONTEND_IMAGE: registry.gitlab.com/petrel-ai/petrel-intranet/petrel.intranet/frontend
    services:
        - docker:dind

    before_script:
        - env
    - docker version
    - docker info
    - docker login --username gitlab-ci-token --password $CI_BUILD_TOKEN registry.gitlab.com
    - cd src

    script:
        - docker build -f Dockerfile_Frontend_Prod -t ${FRONTEND_IMAGE_PROD}:$CI_COMMIT_SHORT_SHA -t ${FRONTEND_IMAGE_PROD}:latest .
    - docker push ${FRONTEND_IMAGE_PROD}

    after_script:
        - docker logout registry.gitlab.com

deploy to k8s stage:
    image: alpine:latest
    stage: deploy
    only:
        - qa
    variables:
        # DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - apk add --no-cache -U curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    tags:
        - intranet
    script:
        - sed -i "s,{api-image},${API_IMAGE}:$CI_COMMIT_SHORT_SHA,g;s,{identity-image},${IDENTITY_IMAGE}:$CI_COMMIT_SHORT_SHA,g;s,{frontend-image},${FRONTEND_IMAGE}:$CI_COMMIT_SHORT_SHA,g" manifests/deployment-stage.yml
    - kubectl apply -f manifests/deployment-stage.yml
    - kubectl apply -f manifests/service-stage.yml
    # - kubectl apply -f manifests/cert.yml --validate=false
    - kubectl apply -f manifests/ingress.yml

deploy to k8s prod:
    image: alpine:latest
    stage: deploy
    only:
        - master
    variables:
        # DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - apk add --no-cache -U curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    tags:
        - intranet
    script:
        - sed -i "s,{api-image},${API_IMAGE_PROD}:$CI_COMMIT_SHORT_SHA,g;s,{identity-image},${IDENTITY_IMAGE_PROD}:$CI_COMMIT_SHORT_SHA,g;s,{frontend-image},${FRONTEND_IMAGE_PROD}:$CI_COMMIT_SHORT_SHA,g" manifests/deployment.yml
    - kubectl apply -f manifests/deployment.yml
    - kubectl apply -f manifests/service.yml

sonar-analyse:
    stage: sonar-analyse
    image: sonarsource/sonar-scanner-cli:latest
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - way=$(echo $CI_COMMIT_REF_NAME | sed "s/\//-/g")
    - sonar-scanner -DskipTests=false -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.language=.NET -Dsonar.sources=src  -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$way-$CI_PROJECT_NAME -Dsonar.projectName=$way-$CI_PROJECT_NAME
    allow_failure: true
    only:
        - merge_requests
    - qa
    - main
    when: manual
